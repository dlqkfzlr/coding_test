import java.io.*
import java.util.*
import kotlin.collections.ArrayList

private lateinit var arr: ArrayList<ArrayList<Node>>
private lateinit var dist: IntArray
private val queue = PriorityQueue<Node>()
private const val INF = Int.MAX_VALUE

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val total = br.readLine().split(" ").map { it.toInt() }
    val n = total[0]
    val e = total[1]

    arr = ArrayList()

    for (i in 0 until n) arr.add(ArrayList())

    dist = IntArray(n) { INF }  // 출발점에서 해당노드까지의 최단거리 저장하는 배열

    val k = br.readLine().toInt() - 1   // startPoint

    for (i in 0 until e) {
        val info = br.readLine().split(" ").map { it.toInt() }
        val u = info[0] - 1
        val v = info[1] - 1
        val w = info[2]
        arr[u].add(Node(v, w ))
    }

    dijkstra(k)

    dist.forEach {
        if (it == INF) {
            bw.write("INF")
            bw.write("\n")
        } else {
            bw.write(it.toString())
            bw.write("\n")
        }
    }
    bw.flush()
    bw.close()
}

fun dijkstra(start: Int) {
    dist[start] = 0 // 시작 거리는 0
    queue.add(Node(start, 0)) // 시작 노드를 큐에 넣어줍니다

    while (!queue.isEmpty()) {
        println("현재queue: ${queue.joinToString()}")
        val curNode = queue.peek()      // 현재노드: 트리에서 가장 멀리 위치한 노드 (우선순위Queue이기 때문에 peek하면 dist가 가장 큰 node가 보여짐)
        val curIndex = curNode.index  // curNode의 인덱스
        val curDist = curNode.dist  // 출발점에서 curNode까지의 거리 (DP로 저장되는 값)
        queue.poll()
        println("curNode: ${curNode}")
        println("dist[${curIndex}]: ${dist[curIndex]}")

        // dist[curIndex]: 출발점에서 curNode까지의 최단거리
        // curDist: DP로 저장된 curNode까지의 최단거리
        // 탐색 시간을 줄이기 위해
        // 최단거리가 DP로 저장한 값보다 작다면 넘어감
        if (dist[curIndex] < curDist) continue

        for (i in 0 until arr[curIndex].size) { // 현재노드와 인접한 노드들 탐색
            val nextIndex = arr[curIndex][i].index
            val nextDist = curDist + arr[curIndex][i].dist // = curNode를 거쳐서 인접노드로 가는 최단 거리값

            if (nextDist < dist[nextIndex]) {
                dist[nextIndex] = nextDist
                queue.add(Node(nextIndex, nextDist))
            }

        }
    }
}

data class Node(val index: Int, val dist: Int) : Comparable<Node> {
    override fun compareTo(other: Node): Int = dist-other.dist
}
