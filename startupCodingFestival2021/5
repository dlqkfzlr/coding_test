lateinit var matrix: Array<CharArray>
lateinit var visited: Array<BooleanArray>
var result: Int = 20
fun main(args: Array<String>) {
    val xy = readLine()!!.split(" ")
    val y = xy[0].toInt()
    val x = xy[1].toInt()
    matrix = Array(x) { CharArray(y) }
    visited = Array(x) { BooleanArray(y) }
    repeat(x){
        readLine()!!.toCharArray().forEachIndexed { index, c -> matrix[it][index] = c }
    }
    for (start in 0 until y){
        if (matrix[0][start] == 'c'){
            println("시작점:(0,$start)")
            dfs(Pair(0, start), 0, x, y)
        }
    }
    println(result)
}

fun dfs(v: Pair<Int, Int>, count: Int, xLimit: Int, yLimit: Int) {
    val x = v.first
    val y = v.second
    if(x >= xLimit - 1){  // dfs 종료조건
        if (result > count) result = count
        return
    }
    // 아래 이동
    if(x+1 < xLimit && matrix[x+1][y] == '.' && !visited[x+1][y]) {
        visited[x+1][y] = true// v에 방문 함
        dfs(Pair(x+1, y), count, xLimit, yLimit)
        visited[x+1][y] = false// v에 방문 안한걸로 침
    }
    // 왼쪽 이동
    if(y-1 > 0 && matrix[x][y-1] == '.' && !visited[x][y-1]) {
        visited[x][y-1] = true// v에 방문 함
        dfs(Pair(x, y-1), count+1, xLimit, yLimit)
        visited[x][y-1] = false// v에 방문 안한걸로 침
    }
    // 오른쪽 이동
    if(y+1 < yLimit && matrix[x][y+1] == '.' && !visited[x][y+1]) {
        visited[x][y+1] = true// v에 방문 함
        dfs(Pair(x, y+1), count+1, xLimit, yLimit)
        visited[x][y+1] = false// v에 방문 안한걸로 침
    }
}
