/* 플로이드와샬 풀이 */
class Solution {
    fun solution(n: Int, results: Array<IntArray>): Int {
        var answer = 0
        val INF = 10000
        val FW = Array(n) { Array(n) { INF } }

        for (result in results) {
            FW[result[0]-1][result[1]-1] = 1
        }

        for (k in 0 until n) {
            for (i in 0 until n) {
                for (j in 0 until n) {
                    if (FW[i][j] > FW[i][k] + FW[k][j])
                        FW[i][j] = FW[i][k] + FW[k][j]
                }
            }
        }

        for (a in 0 until n){
            var isDecidable = true
            for (b in 0 until n){
                if (a == b) continue
                if (FW[a][b] == INF && FW[b][a] == INF){
                    isDecidable = false
                    break
                }
            }
            if (isDecidable) answer++
        }

        return answer
    }
}

/* 다른사람 풀이 */
import java.util.*
 
class Solution {
    fun solution(operations: Array<String>): IntArray {
        var answer = intArrayOf(0, 0)
        val maxQue = PriorityQueue<Int>(Collections.reverseOrder())
        val minQue = PriorityQueue<Int>()
 
        for(input in operations) {
            val op: List<String> = input.split(" ")
            when(op[0]) {
                "I" -> {
                    val num: Int = Integer.parseInt(op[1])
                    maxQue.offer(num)
                    minQue.offer(num)
                }
                "D" -> run {
                    if(maxQue.isEmpty()) {
                        return@run
                    }
                    when(op[1]) {
                        "1" -> {
                            val max: Int = maxQue.poll()
                            minQue.remove(max)
                        }
                        "-1" -> {
                            val min: Int = minQue.poll()
                            maxQue.remove(min)
                        }
                    }
                }
            }
        }
        if(!maxQue.isEmpty()) {
            answer[0] = maxQue.poll()
            answer[1] = minQue.poll()
        }
        return answer
    }
}
