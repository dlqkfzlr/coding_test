/* 나의 답안 */
class Solution {
    fun solution(nums: IntArray): Int {
        val combList = mutableListOf<List<Int>>()
        val check = Array<Boolean>(nums.size) { false }
        combination(combList, nums.toList(), check, 0, 3)
        return combList.map { it.reduce { acc, i ->  acc+i} }.filter { checkPrimeNum(it) }.count()
    }

    fun combination(answer: MutableList<List<Int>>, el: List<Int>, ck: Array<Boolean>, start: Int, target: Int) {
        if(target == 0) {
            answer.addAll( listOf(el.filterIndexed { index, _ -> ck[index] }) )
        } else {
            for(i in start until el.size) {
                ck[i] = true
                combination(answer, el, ck, i + 1, target - 1)
                ck[i] = false
            }
        }
    }

    fun checkPrimeNum(n: Int): Boolean {
        val limit = n / 2
        for(i in 2..limit) {
            if(n % i == 0) return false
        }
        return true
    }
}

/* 다른사람 풀이 */
class Solution {
    fun isPrime(n: Int): Boolean {
        if(n<2)return false
        else if(n<6){
            if(n==4)
            return false
            else return true}
        for (i in 2..Math.sqrt(n.toDouble()).toInt()){
            if(n%i==0)return false
        }
        return true
    }
    fun solution(nums: IntArray): Int {
        var answer = 0
        for (i in 0..nums.size-3){
            for(j in i+1..nums.size-2){
                for(k in j+1..nums.size-1){           
                    println(nums[i]+nums[j]+nums[k])
                    if(isPrime(nums[i]+nums[j]+nums[k]))answer++
                }
            }
        }

        return answer
    }
}
